@page "/chat"
@using Markdig
@using MyAiTools.AiFun.Code
@inject ChatService ChatService
@inject IJSRuntime JsRuntime



<div id="scrollableDiv" class="chat-container">
    @foreach (var message in _messages)
    {
        <div class="message @(message.IsUser ? "user-message" : "system-message")">
            @if (message.Content != null)
            {
                @((MarkupString)FormatMessage(message.Content))
            }
        </div>
    }
</div>

<div class="input-group">
    <textarea @bind="_userInput" @onkeyup="HandleKeyUp" class="form-control" placeholder="输入你的消息..."></textarea>
    <button class="btn btn-primary" @onclick="SendMessage">发送</button>
    <button class="btn btn-primary" @onclick="ClearMessage">清空</button>
    @* <button class="btn btn-primary" @onclick="SaveFile">存储记忆</button> *@
    @* <button class="btn btn-primary" @onclick="MemoryDelFile">清除记忆</button> *@
    @* <button class="btn btn-primary" @onclick="SaveConversation">保存</button> *@
    @* <button class="btn btn-primary" @onclick="LoadMemory">记忆</button> *@
</div>


@code {
    private readonly List<MessageModel> _messages = [];
    private string? _newReply = string.Empty;
    private string? _userInput;
    
    /// <summary>
    ///  初始化
    /// </summary>
    protected override void OnInitialized()
    {
        ChatService.ChatHistoryChanged += ReadMessage;
        ChatService.BeginNewReply += BeginNewReply;
    }

    /// <summary>
    ///     开始一个新的回复
    /// </summary>
    private void BeginNewReply()
    {
        _newReply = string.Empty;
        _messages.Add(new MessageModel { Content = _newReply, IsUser = false });
    }

    /// <summary>
    ///     刷新消息
    /// </summary>
    private async void ReadMessage(string streamMessage)
    {
        await Task.Run(() =>
        {
            _newReply += streamMessage;
            _messages.Last().Content = _newReply;
        });
        //手工渲染
        StateHasChanged();
        // 调用 JavaScript 方法滚动到底部
        await ScrollToBottom(); 
    }

    /// <summary>
    ///     向后台发送消息
    /// </summary>
    /// <returns></returns>
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_userInput))
        {
            // 这里可以添加代码来处理用户的输入，比如发送到后端API并获取回复
            var tempUserInput = _userInput;
            _messages.Add(new MessageModel { Content = _userInput, IsUser = true });
            _userInput = string.Empty; // 清空输入框
            // StateHasChanged();
            // await ScrollToBottom();
            // 模拟系统回复
            await ChatService.Chat(tempUserInput);
        }
    }

    /// <summary>
    ///     清空消息
    /// </summary>
    private void ClearMessage()
    {
        _messages.Clear();
        ChatService.ClearChatHistory();
    }

    /// <summary>
    ///     快捷键处理
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        //todo 无法正常触发，未找到原因
        if (e is { CtrlKey: true, Key: "Enter" })
        {
            await SendMessage();
        }
    }

    /// <summary>
    ///    滚动到底部
    /// </summary>
    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("scrollToBottom");
    }

    /// <summary>
    ///     格式化消息，用于图片显示
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    private string FormatMessage(string message)
    {
        var mdMessage = Markdown.ToHtml(message);
        return mdMessage;
    }

    /// <summary>
    ///    存储文件
    /// </summary>
    private async Task SaveFile()
    {
        await ChatService.MemorySaveFile();
    }

    //删除记忆中的文件
    private async Task MemoryDelFile()
    {
        //如果没有输入文件名，则删除所有文件
        await ChatService.MemoryDelFile(_userInput);
    }

    //对话框显示模型
    private class MessageModel
    {
        public string? Content { get; set; }
        public bool IsUser { get; init; }
    }


}