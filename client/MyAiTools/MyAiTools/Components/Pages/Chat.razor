@page "/chatHistory"
@using Microsoft.SemanticKernel
@using MyAiTools.AiFun.Code
@using Microsoft.SemanticKernel.ChatCompletion
@inject ChatService chatService
@inject NavigationManager Navigation

<h3>聊天工具</h3>

<div class="chat-container">
    @foreach (var message in messages)
    {
        <div class="message @(message.IsUser ? "user-message" : "system-message")">
            @foreach (var line in message.Content.Split('\n'))
            {
                @((MarkupString)FormatMessage(line))
                <br/>
            }
        </div>
    }
</div>

<div class="input-group">
    <input @bind="userInput" @onkeyup="HandleKeyUp" class="form-control" placeholder="输入你的消息..."/>
    <button class="btn btn-primary" @onclick="SendMessage">发送</button>
    <button class="btn btn-primary" @onclick="ClearMessage">清空</button>
</div>

@code {
    private readonly List<MessageModel> messages = new();
    private readonly List<ChatMessageContent> chatMessages = new();
    private string? userInput;

    protected override void OnInitialized()
    {
        addMessage();
    }

    private void addMessage()
    {
        chatMessages.Clear();
        messages.Clear();
        foreach (var chatMessageContent in chatService.chatHistory)
        {
            chatMessages.Add(chatMessageContent);
        }

        foreach (var chatMessageContent in chatMessages)
        {
            if (chatMessageContent.Role.Label == "assistant")
            {
                messages.Add(new MessageModel { Content = chatMessageContent.ToString(), IsUser = false });
            }

            if (chatMessageContent.Role.Label == "user")
            {
                messages.Add(new MessageModel { Content = chatMessageContent.ToString(), IsUser = true });
            }
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            // 这里可以添加代码来处理用户的输入，比如发送到后端API并获取回复
            var tempUserInput = userInput;
            userInput = string.Empty; // 清空输入框
            // 模拟系统回复
            var reply = await chatService.Chat(tempUserInput);
            addMessage();
        }
    }

    private void ClearMessage()
    {
        chatService.ClearChatHistory();
        addMessage();
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private string FormatMessage(string message)
    {
        var urlPattern = @"(http|https)://[^\s]+";
        return System.Text.RegularExpressions.Regex.Replace(message, urlPattern, match =>
        {
            var url = match.Value;
            return $"<iframe src=\"{url}\" width=\"512\" height=\"512\"></iframe>";
        });
    }

    private class MessageModel
    {
        public string? Content { get; init; }
        public bool IsUser { get; init; }
    }

}