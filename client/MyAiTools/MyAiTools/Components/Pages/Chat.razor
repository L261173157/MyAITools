@page "/chat"
@using Markdig
@using MyAiTools.AiFun.Code
@using MyAiTools.AiFun.Model

@inject ChatService ChatService
@inject IJSRuntime JsRuntime


<div class="chat-container">

    <div id="scrollableDiv" class="messages">
        @foreach (var message in _currentDialog.Messages)
        {
            <div class="message @GetMessageRole(message)">
                @if (message.Content != null)
                {
                    @((MarkupString)FormatMessage(message.Content))
                }
            </div>
        }
    </div>

    <div class="dialog-list">
        @foreach (var dialog in ChatService.DialogGroup.Dialogs)
        {
            <button class="btn @GetButtonColor(dialog)" @onclick="() => LoadDialog(dialog)">@dialog.Title</button>
        }
    </div>

</div>

<div class="input-group">
    <textarea @bind="_userInput" @onkeyup="HandleKeyUp" class="form-control" placeholder="输入你的消息..."></textarea>
    <button class="btn btn-primary" @onclick="SendMessage">发送</button>
    <button class="btn btn-primary" @onclick="ClearMessage">清空</button>
    <button class="btn btn-primary" @onclick="AddDialog">新对话</button> <!-- Add button to start a new dialog topic -->
</div>


@code {
    private DialogModel _currentDialog=new() {Id = 0,Title = ""}; // Add a property to store the current dialog
    private int _currentDialogId = 1; // Add a property to store the current dialog ID

    private string? _newReply = string.Empty;
    private string? _userInput;

    /// <summary>
    ///  初始化
    /// </summary>
    protected override void OnInitialized()
    {
        ChatService.BeginNewReply += BeginNewReply;
    }

    /// <summary>
    ///     开始一个新的回复
    /// </summary>
    private async void BeginNewReply()
    {
        await Task.Run(SynMessage);
        //手工渲染
        StateHasChanged();
        // 调用 JavaScript 方法滚动到底部
        await ScrollToBottom();
    }

    /// <summary>
    /// 与后台同步消息
    /// </summary>
    private void SynMessage()
    {
        foreach (var dialog in ChatService.DialogGroup.Dialogs.Where(dialog => dialog.Id == _currentDialogId))
        {
            _currentDialog = dialog;
        }
    }

    /// <summary>
    ///     向后台发送消息
    /// </summary>
    /// <returns></returns>
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_userInput))
        {
            // 这里可以添加代码来处理用户的输入，比如发送到后端API并获取回复
            var userInput = _userInput;
            _userInput = string.Empty; // 清空输入框
            // 系统回复
            await ChatService.Chat(userInput, _currentDialogId);
        }
    }

    /// <summary>
    ///     清空消息
    /// </summary>
    private void ClearMessage()
    {
        ChatService.ClearChatHistory(_currentDialogId);
    }


    #region 小功能区域

    /// <summary>
    ///     快捷键处理
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        //todo 无法正常触发，未找到原因
        if (e is { CtrlKey: true, Key: "Enter" })
        {
            await SendMessage();
        }
    }

    /// <summary>
    ///    滚动到底部
    /// </summary>
    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("scrollToBottom");
    }

    /// <summary>
    ///     格式化消息，用于图片显示
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    private string FormatMessage(string message)
    {
        var mdMessage = Markdown.ToHtml(message);
        return mdMessage;
    }
    //获取消息角色
    private string GetMessageRole(MessageModel message)
    {
        return message.Role switch
        {
            ChatRole.User => "user-message",
            ChatRole.System => "system-message",
            ChatRole.Assistant => "assistant-message",
            _ => "system-message"
        };
    }
    //获取按钮颜色
    private string GetButtonColor(DialogModel dialog)
    {
        return dialog.Id == _currentDialogId ?   "btn-secondary":"btn-primary";
    }

    #endregion

    /// <summary>
    ///     开启新对话主题
    /// </summary>
    private void AddDialog()
    {
        ChatService.AddDialog();
        LoadDialog(ChatService.DialogGroup.Dialogs.Last());
    }

    /// <summary>
    ///     加载对话
    /// </summary>
    /// <param name="dialog"></param>
    private void LoadDialog(DialogModel dialog)
    {
        _currentDialogId = dialog.Id;
        SynMessage();
        //手工渲染
        StateHasChanged();
    }

}