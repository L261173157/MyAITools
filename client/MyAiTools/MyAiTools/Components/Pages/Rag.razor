@page "/rag"
@using Markdig
@using MyAiTools.AiFun.Code
@inject IJSRuntime JsRuntime
@inject RagService RagService


<div id="scrollableDiv" class="chat-container">
    @foreach (var message in _messages)
    {
        <div class="message @(message.IsUser ? "user-message" : "system-message")">
            @if (message.Content != null)
            {
                @((MarkupString)FormatMessage(message.Content))
            }
        </div>
    }
</div>

<div class="input-group">
    <textarea @bind="_userInput" @onkeyup="HandleKeyUp" class="form-control" placeholder="输入你的提问..."></textarea>
    <button class="btn btn-primary" @onclick="SendMessage">发送</button>
    <button class="btn btn-primary" @onclick="ClearMessage">清空</button>
    <button class="btn btn-primary" @onclick="SaveFile">读取文件</button>
    <button class="btn btn-primary" @onclick="MemoryDelFile">清除存储</button>
</div>


@code {
    private readonly List<MessageMode> _messages = [];
    private string? _userInput;

    protected override void OnInitialized()
    {

    }

    /// <summary>
    ///     向后台发送消息
    /// </summary>
    /// <returns></returns>
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(_userInput))
        {
            // 这里可以添加代码来处理用户的输入，比如发送到后端API并获取回复
            var tempUserInput = _userInput;
            _messages.Add(new MessageMode { Content = _userInput, IsUser = true });
            _userInput = string.Empty; // 清空输入框
            var answer= await RagService.AskAsync(tempUserInput);
            _messages.Add(new MessageMode { Content = answer, IsUser = false });
            await ScrollToBottom();
        }
    }

    /// <summary>
    ///     清空消息
    /// </summary>
    private void ClearMessage()
    {
        _messages.Clear();
    }

    /// <summary>
    ///     快捷键处理
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        //todo 无法正常触发，未找到原因
        if (e is { CtrlKey: true, Key: "Enter" })
        {
            await SendMessage();
        }
    }

    /// <summary>
    ///    滚动到底部
    /// </summary>
    private async Task ScrollToBottom()
    {
        await JsRuntime.InvokeVoidAsync("scrollToBottom");
    }

    /// <summary>
    ///     格式化消息，用于图片显示
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    private string FormatMessage(string message)
    {
        var mdMessage = Markdown.ToHtml(message);
        return mdMessage;
    }

    /// <summary>
    ///    存储文件
    /// </summary>
    private async Task SaveFile()
    {
       var result= await RagService.MemorySaveFile();
       _messages.Add(new MessageMode { Content = $"{result}", IsUser = false });
    }

    //删除记忆中的文件
    private async Task MemoryDelFile()
    {
        //如果没有输入文件名，则删除所有文件
      var result=  await RagService.MemoryDelFile(_userInput);
      _messages.Add(new MessageMode { Content = result, IsUser = false });
    }

    //对话框显示模型
    private class MessageMode
    {
        public string? Content { get; init; }
        public bool IsUser { get; init; }
    }


}